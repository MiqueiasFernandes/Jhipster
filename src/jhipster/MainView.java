/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jhipster;

import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.DefaultCaret;
import jhipster.files.Resources;

/**
 *
 * @author mfernandes
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jhipster/hipster.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel2.setText("JHipster");

        jLabel3.setText("criar nova aplicação");

        jTextField1.setText("nome");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jButton1.setText("logo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("criar!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField2.setText("/home/mfernandes/nome/");

        jButton3.setText("entidades");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("sair automatico");

        jLabel4.setText("00:00");
        jLabel4.setEnabled(false);

        jCheckBox2.setText("HTML Editor");

        jCheckBox3.setText("QRCode Reader");

        jCheckBox4.setText("Table Header");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jCheckBox5.setText("Preferências e Privilégios");

        jCheckBox6.setText("autoLogin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jCheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField1)
                                .addComponent(jTextField2)
                                .addComponent(jLabel3)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton3))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(31, 31, 31)
                                    .addComponent(jLabel2)))
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox3)
                            .addComponent(jCheckBox4)
                            .addComponent(jCheckBox5)
                            .addComponent(jCheckBox6))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jLabel4))
                        .addGap(13, 13, 13)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    File[] selectedFiles = null;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jf.setMultiSelectionEnabled(true);
        jf.showOpenDialog(this);
        selectedFiles = jf.getSelectedFiles();

    }//GEN-LAST:event_jButton1ActionPerformed

    boolean terminou = false;

    int min = 0, seg = 0;

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        criar();

    }//GEN-LAST:event_jButton2ActionPerformed

    void teste2() {

        String content = "            <label>Permissões</label>\n"
                + "            <div class=\"table-responsive\">\n"
                + "            <table class=\"table table-striped\">\n"
                + "                <thead>\n"
                + "                <th>\n"
                + "                    Entidade\n"
                + "                </th>\n"
                + "                <th>\n"
                + "                    visualizar\n"
                + "                </th>\n"
                + "                <th>\n"
                + "                    Adicionar\n"
                + "                </th>\n"
                + "                <th>\n"
                + "                    Editar\n"
                + "                </th>\n"
                + "                <th>\n"
                + "                    Deletar\n"
                + "                </th>\n"
                + "                </thead>\n"
                + "                <tbody>\n"
                + "                <tr *ngFor=\"let entidade of entidades\">\n"
                + "                    <td>{{entidade}}</td>\n"
                + "                    <td>\n"
                + "                        <input #vari1 type=\"checkbox\" class=\"form-control\"\n"
                + "                               (change)=\"setCheck(vari1.checked, entidade, 'visualizar')\" [checked]=\"checks[entidade]['visualizar']\" />\n"
                + "                    </td>\n"
                + "                    <td>\n"
                + "                        <input #vari2 type=\"checkbox\" class=\"form-control\"\n"
                + "                               (change)=\"setCheck(vari2.checked, entidade, 'adicionar')\" [checked]=\"checks[entidade]['adicionar']\" />\n"
                + "                    </td>\n"
                + "                    <td>\n"
                + "                        <input #vari3 type=\"checkbox\" class=\"form-control\"\n"
                + "                               (change)=\"setCheck(vari3.checked, entidade, 'editar')\" [checked]=\"checks[entidade]['editar']\" />\n"
                + "                    </td>\n"
                + "                    <td>\n"
                + "                        <input #vari4 type=\"checkbox\" class=\"form-control\"\n"
                + "                               (change)=\"setCheck(vari4.checked, entidade, 'deletar')\" [checked]=\"checks[entidade]['deletar']\" />\n"
                + "                    </td>\n"
                + "                </tr>\n"
                + "                </tbody>\n"
                + "            </table>\n"
                + "            </div>";

        Resources.insertOnIntervalo(content, ".*nome7App.cargo.permissao.*", ".*cargo.permissao.*", false, false,
                "/home/mfernandes/nome7/src/main/webapp/app/entities/cargo/cargo-dialog.component.html");

        Resources.insertOnIntervalo("   save() {\n"
                + "        this.isSaving = true;\n"
                + "\n"
                + "        let priv = \"\";\n"
                + "\n"
                + "        this.entidades.forEach((ent :string) => {\n"
                + "            this.niveis.forEach((nv: string) => {\n"
                + "                if (this.checks[ent][nv]) {\n"
                + "                    priv += ent + \"-\" + nv + \",\";\n"
                + "                }\n"
                + "            });\n"
                + "        });\n"
                + "\n"
                + "\n"
                + "        this.cargo.permissao = priv;\n"
                + "\n"
                + "        if (this.cargo.id !== undefined) {\n"
                + "            this.subscribeToSaveResponse(\n"
                + "                this.cargoService.update(this.cargo));\n"
                + "        } else {\n"
                + "            this.subscribeToSaveResponse(\n"
                + "                this.cargoService.create(this.cargo));\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "  setCheck(checked: boolean, entidade: string, nivel: string) {\n"
                + "        this.checks[entidade][nivel] = checked;\n"
                + "        console.log(checked + entidade + nivel);\n"
                + "        console.log(this.checks);\n"
                + "    }", ".*save[() {].*", ".*subscribeToSaveResponse.*", false, false, "/home/mfernandes/nome7/src/main/webapp/app/entities/cargo/cargo-dialog.component.ts");

        Resources.insertOnIntervalo(
                "this.isSaving = false;\n"
                + " this.cargo.permissao.split(',').forEach((privilegio: string) => {\n"
                + "            const data: string[] = privilegio.split(\"-\");\n"
                + "            if (!isNullOrUndefined(data) && data.length === 2) {\n"
                + "                this.checks[data[0]][data[1]] = true;\n"
                + "            }\n"
                + "        });", ".*ngOnInit[() {].*", ".*}.*", true, true, "/home/mfernandes/nome7/src/main/webapp/app/entities/cargo/cargo-dialog.component.ts");

        Resources.insertOnIntervalo("    entidades: string[] = [\n"
                + "        \"cardapio\",\n"
                + "        \"cargo\",\n"
                + "        \"cliente\",\n"
                + "        \"colaborador\",\n"
                + "        \"comanda\",\n"
                + "        \"endereco\",\n"
                + "        \"imposto\",\n"
                + "        \"lancamento\",\n"
                + "        \"mesa\",\n"
                + "        \"nota\",\n"
                + "        \"produto\",\n"
                + "        \"restaurante\",\n"
                + "        \"venda\"\n"
                + "    ];\n"
                + "\n"
                + "    niveis: string[] = [\n"
                + "        \"visualizar\",\n"
                + "        \"adicionar\",\n"
                + "        \"editar\",\n"
                + "        \"deletar\"\n"
                + "    ];\n"
                + "\n"
                + "    checks: boolean[][] = [];\n"
                + "\n"
                + "\n"
                + "\n"
                + "    constructor(\n"
                + "        public activeModal: NgbActiveModal,\n"
                + "        private dataUtils: JhiDataUtils,\n"
                + "        private jhiAlertService: JhiAlertService,\n"
                + "        private cargoService: CargoService,\n"
                + "        private eventManager: JhiEventManager\n"
                + "    ) {\n"
                + "        this.entidades.forEach((ent :string) => {\n"
                + "\n"
                + "            const bols:boolean[] = [];\n"
                + "\n"
                + "            bols[\"visualizar\"] = false;\n"
                + "            bols[\"adicionar\"] = false;\n"
                + "            bols[\"editar\"] = false;\n"
                + "            bols[\"deletar\"] = false;\n"
                + "\n"
                + "            this.checks[ent] = bols;\n"
                + "        })\n"
                + "    }", ".*constructor.*", ".*}.*", false, false,
                "/home/mfernandes/nome7/src/main/webapp/app/entities/cargo/cargo-dialog.component.ts");

    }

//    void teste() {
//
//        String projeto = "nome9";
//        String pastaJAVA = "/home/mfernandes/nome9/src/main/java/com/mikeias/nome9/";
//
//        String fs = pastaJAVA + "web/rest/";
//
//        Resources.projeto = projeto;
//
//        Resources.applyInMassa(fs.replace("/src/main/", "/src/test/"), ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*|.*Cargo.*",
//                "insertOnPositionFile", new Object[]{
//                    "import com.mikeias.${{projeto}}$.repository.CargoRepository;\n",
//                    2,
//                    -1,
//                    new File(projeto)
//                }, 0);
//
//        Resources.applyInMassa(fs.replace("/src/main/", "/src/test/"), ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*|.*Cargo.*",
//                "insertOnFile", new Object[]{
//                    "    private CargoRepository cargoRepository;\n\n "
//                    + "    @Autowired\n",
//                    "@Autowired",
//                    new File(pastaJAVA),
//                    true
//                }, -1);
//        Resources.retirarDeFileNome = "ResourceIntTest";
//
//        Resources.applyInMassa(fs.replace("/src/main/", "/src/test/"), ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*|.*Cargo.*",
//                "insertOnIntervalo", new Object[]{
//                    "        final ${{filenameAlterado}}$Resource ${{filenamealterado}}$Resource = new ${{filenameAlterado}}$Resource(${{filenamealterado}}$Repository,cargoRepository);\n",
//                    ".*final.*Resource.*Resource.*new .*Resource.*Repository.*",
//                    ".*this.*", false, true,
//                    new File(projeto)
//                }, 0);
//
//    }

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped

        jTextField2.setText("/home/mfernandes/" + jTextField1.getText().toLowerCase() + "/");

    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        jTextField2.setText("/home/mfernandes/" + jTextField1.getText().toLowerCase() + "/");

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            criar();
        }

    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        jTextField2.setText("/home/mfernandes/" + jTextField1.getText().toLowerCase() + "/");
    }//GEN-LAST:event_jTextField1FocusLost

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jf.setMultiSelectionEnabled(false);
        jf.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.getName().endsWith("jh") | f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "arquivos JDL";
            }
        });
        jf.showOpenDialog(this);

        jdl = jf.getSelectedFile().getAbsolutePath();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox4.isSelected()) {
            jCheckBox5.setSelected(true);
            jCheckBox5.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    String jdl = null;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    boolean setFileConfig() {

        String base = "{\n"
                + "  \"generator-jhipster\": {\n"
                + "    \"promptValues\": {\n"
                + "      \"packageName\": \"com.mikeias." + jTextField1.getText().toLowerCase() + "\",\n"
                + "      \"nativeLanguage\": \"pt-br\"\n"
                + "    },\n"
                + "    \"jhipsterVersion\": \"4.8.2\",\n"
                + "    \"baseName\": \"" + jTextField1.getText() + "\",\n"
                + "    \"packageName\": \"com.mikeias." + jTextField1.getText().toLowerCase() + "\",\n"
                + "    \"packageFolder\": \"com/mikeias/" + jTextField1.getText().toLowerCase() + "\",\n"
                + "    \"serverPort\": \"8080\",\n"
                + "    \"authenticationType\": \"oauth2\",\n"
                + "    \"hibernateCache\": \"ehcache\",\n"
                + "    \"clusteredHttpSession\": false,\n"
                + "    \"websocket\": \"spring-websocket\",\n"
                + "    \"databaseType\": \"sql\",\n"
                + "    \"devDatabaseType\": \"h2Disk\",\n"
                + "    \"prodDatabaseType\": \"postgresql\",\n"
                + "    \"searchEngine\": false,\n"
                + "    \"messageBroker\": false,\n"
                + "    \"serviceDiscoveryType\": false,\n"
                + "    \"buildTool\": \"maven\",\n"
                + "    \"enableSocialSignIn\": false,\n"
                + "    \"enableSwaggerCodegen\": false,\n"
                + "    \"clientFramework\": \"angularX\",\n"
                + "    \"useSass\": true,\n"
                + "    \"clientPackageManager\": \"yarn\",\n"
                + "    \"applicationType\": \"monolith\",\n"
                + "    \"testFrameworks\": [],\n"
                + "    \"jhiPrefix\": \"jhi\",\n"
                + "    \"otherModules\": [\n"
                + "      {\n"
                + "        \"name\": \"generator-jhipster-pace\",\n"
                + "        \"version\": \"0.1.3\"\n"
                + "      },\n"
                + "      {\n"
                + "        \"name\": \"generator-jhipster-banner\",\n"
                + "        \"version\": \"0.1.0\"\n"
                + "      }\n"
                + "    ],\n"
                + "    \"enableTranslation\": true,\n"
                + "    \"nativeLanguage\": \"pt-br\",\n"
                + "    \"languages\": [\n"
                + "      \"pt-br\",\n"
                + "      \"en\"\n"
                + "    ]\n"
                + "  }\n"
                + "}";

        try {
            FileWriter fw = new FileWriter(jTextField2.getText() + ".yo-rc.json");

            fw.write(base);
            fw.close();
            return true;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Impossivel escrever arquivo "
                    + jTextField2.getText() + ".yo-rc.json" + "\n error: " + ex);
        }
        return false;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void criar() {

        jLabel4.setEnabled(true);
        jButton2.setEnabled(false);

        new Thread(new Runnable() {
            @Override
            public void run() {
                while (!terminou) {

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    seg++;

                    if (seg > 59) {
                        seg = 0;
                        min++;
                    }
                    jLabel4.setText(min + ":" + seg);
                }
            }
        }).start();

        File dir = new File(jTextField2.getText());

        if (!dir.mkdirs()) {
            JOptionPane.showMessageDialog(rootPane, "Impossivel criar diretorio " + dir.getAbsolutePath());
            return;
        }

        jProgressBar1.setValue(10);

        if (!setFileConfig()) {
            return;
        }
        jProgressBar1.setValue(20);

        DefaultCaret caret = (DefaultCaret) jTextArea1.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        new Thread(new Runnable() {
            @Override
            public void run() {

                try {

                    java.awt.Toolkit.getDefaultToolkit().beep();

                    runCommand(dir, "jhipster");

//                    int cont = 0;
//                    Process exec = Runtime.getRuntime().exec("jhipster", new String[]{""}, dir);
//
//                    Scanner sc = new Scanner(exec.getInputStream());
//
//                    while (sc.hasNextLine()) {
//                        String next = sc.nextLine();
//
//                        jTextArea1.append(next + "\n");
//
//                        if (cont++ > 1000) {
//                            jTextArea1.setText("");
//                            cont = 0;
//                        }
//
//                    }
                    jProgressBar1.setValue(50);

                    ///imagns
                    if (selectedFiles != null) {
                        jTextArea1.append("###########################INSERINDO IMAGENS###########################\n");
                        for (File file : selectedFiles) {

                            if (file.getName().endsWith(".ico")) {

                                Files.copy(
                                        file.toPath(),
                                        new File(dir.getAbsolutePath() + "/src/main/webapp/favicon.ico").toPath(),
                                        StandardCopyOption.REPLACE_EXISTING);

                                jTextArea1.append("armazenando icone..\n");

                            } else if (file.getName().contains("logo")) {

                                jTextArea1.append("armazenando logo..\n");

                                Files.copy(
                                        file.toPath(),
                                        new File(dir.getAbsolutePath() + "/src/main/webapp/content/images/logo-jhipster.png").toPath(),
                                        StandardCopyOption.REPLACE_EXISTING);

                            } else if (file.getName().contains("2")) {
                                Files.copy(
                                        file.toPath(),
                                        new File(dir.getAbsolutePath() + "/src/main/webapp/content/images/hipster2x.png").toPath(),
                                        StandardCopyOption.REPLACE_EXISTING);
                                jTextArea1.append("armazenando imagem1..\n");
                            } else {
                                Files.copy(
                                        file.toPath(),
                                        new File(dir.getAbsolutePath() + "/src/main/webapp/content/images/hipster.png").toPath(),
                                        StandardCopyOption.REPLACE_EXISTING);
                                jTextArea1.append("armazenando imagem2..\n");
                            }

                        }
                    }

                    jProgressBar1.setValue(55);

                    ///entidades
                    if (jdl != null) {
                        jTextArea1.append("###########################IMPORTANDO ENTIDADES ###########################\n");
                        runCommand(dir, "jhipster,import-jdl," + jdl + ",--force");
                    }
                    jProgressBar1.setValue(60);

                    ////pace
                    ///yo jhipster-pace
                    jTextArea1.append("###########################DEFININDO LOADING###########################\n");
                    Process exec = Runtime.getRuntime().exec(new String[]{"yo", "jhipster-pace", "--force"}, new String[]{""}, dir);

                    Scanner sc = new Scanner(exec.getInputStream());
                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(exec.getOutputStream()));
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    while (sc.hasNextLine()) {
                        String next = sc.nextLine();

                        if (cont++ > 1000) {
                            jTextArea1.setText("");
                            cont = 0;
                        }

                        jTextArea1.append(next + "\n");

                    }

                    jProgressBar1.setValue(80);

                    ///banner
                    jTextArea1.append("###########################CRIANDO BANER###########################\n");

                    Resources.storeResource("_banner.txt", dir.getAbsolutePath() + "/node_modules/generator-jhipster-banner/generators/app/templates/");

                    exec = Runtime.getRuntime().exec(new String[]{"yo", "jhipster-banner", "--force"}, new String[]{""}, dir);

                    sc = new Scanner(exec.getInputStream());
                    bufferedWriter = new BufferedWriter(new OutputStreamWriter(exec.getOutputStream()));
                    bufferedWriter.append(jTextField1.getText());
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.append("n");
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.append("n");
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.append("n");
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.append("n");
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.append("n");
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                    bufferedWriter.append("n");
                    bufferedWriter.newLine();
                    bufferedWriter.flush();

                    while (sc.hasNextLine()) {
                        String next = sc.nextLine();

                        if (next.contains("banner message you wish to convert to ASCII")) {
                            bufferedWriter.newLine();
                            bufferedWriter.flush();
                            next += "  " + jTextField1.getText();
                        }

                        if (next.contains("like to use")) {
                            bufferedWriter.newLine();
                            bufferedWriter.flush();
                            next += " ENTER ";
                        }
                        if (next.contains("append")) {
                            bufferedWriter.append("n");
                            bufferedWriter.newLine();
                            bufferedWriter.flush();
                            next += " n ENTER ";
                        }

                        if (cont++ > 1000) {
                            jTextArea1.setText("");
                            cont = 0;
                        }

                        jTextArea1.append(next + "\n");

                    }

                    jProgressBar1.setValue(90);

                    String projeto = jTextField1.getText().toLowerCase();
                    String pastaAPP = dir.getAbsolutePath() + "/src/main/webapp/app/";
                    String pastaJAVA = dir.getAbsolutePath() + "/src/main/java/com/mikeias/" + projeto + "/";

                    jTextArea1.append("###########################CUSTOMIZANDO ALERTS###########################\n");
                    Resources.storeResource("alert.component.ts", pastaAPP + "shared/alert/");

                    ///material & navbar
                    jTextArea1.append("###########################FIXANDO NAVBAR###########################\n");
                    StringBuffer stringBuffer = new StringBuffer(".dropdown-menu {\n"
                            + "    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n"
                            + "    border-radius: 0px;\n"
                            + "}\n"
                            + "\n"
                            + ".modal-content {\n"
                            + "    border-radius: 0px;\n"
                            + "    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n"
                            + "}\n"
                            + "\n"
                            + ".container-fluid {\n"
                            + "    padding-top: 55px;\n"
                            + "}\n"
                            + ".footer {\n"
                            + "    margin-top: 10px;\n"
                            + "    text-align: center;\n"
                            + "    padding-top: 10px;\n"
                            + "}\n");

                    sc = new Scanner(new File(dir.getAbsolutePath() + "/src/main/webapp/content/scss/global.scss"));

                    while (sc.hasNextLine()) {
                        stringBuffer.append(sc.nextLine()).append("\n");
                    }
                    sc.close();
                    FileWriter fw = new FileWriter(new File(dir.getAbsolutePath() + "/src/main/webapp/content/scss/global.scss"));
                    fw.write(stringBuffer.toString());
                    fw.close();

                    stringBuffer = new StringBuffer(".navbar-fixed-top {\n"
                            + "    position: fixed;\n"
                            + "    right: 0;\n"
                            + "    left: 0;\n"
                            + "    z-index: 1030;\n"
                            + "    top: 0;\n"
                            + "}\n"
                            + "\n"
                            + ".jh-navbar {\n"
                            + "    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 1px 2px 0 rgba(0, 0, 0, 0.19);\n"
                            + "}\n\n");

                    sc = new Scanner(new File(dir.getAbsolutePath() + "/src/main/webapp/app/layouts/navbar/navbar.scss"));

                    while (sc.hasNextLine()) {
                        stringBuffer.append(sc.nextLine()).append("\n");
                    }
                    sc.close();
                    fw = new FileWriter(new File(dir.getAbsolutePath() + "/src/main/webapp/app/layouts/navbar/navbar.scss"));
                    fw.write(stringBuffer.toString());
                    fw.close();

                    stringBuffer = new StringBuffer();
                    sc = new Scanner(new File(dir.getAbsolutePath() + "/src/main/webapp/app/layouts/navbar/navbar.component.html"));

                    boolean prim = true;

                    while (sc.hasNextLine()) {
                        String next = sc.nextLine();
                        if (prim) {
                            prim = false;
                            stringBuffer.append("<nav class=\"navbar navbar-dark navbar-expand-md jh-navbar navbar-fixed-top\">\n");
                            continue;
                        }

                        stringBuffer.append(next).append("\n");
                    }
                    sc.close();
                    fw = new FileWriter(new File(dir.getAbsolutePath() + "/src/main/webapp/app/layouts/navbar/navbar.component.html"));
                    fw.write(stringBuffer.toString());
                    fw.close();

                    stringBuffer = new StringBuffer();

                    sc = new Scanner(new File(dir.getAbsolutePath() + "/src/main/webapp/index.html"));

                    while (sc.hasNextLine()) {

                        String next = sc.nextLine();

                        if (next.contains("<style type=\"text/css\">")) {
                            stringBuffer.append("<script>\n"
                                    + "        slidingTagLiAfterStyle = document.createElement(\"style\");\n"
                                    + "        slidingTagLiAfterStyle.innerHTML = `");
                            continue;
                        }

                        if (next.contains("content: 'LOADING';")) {
                            stringBuffer.append("            content: 'Carregando 0%';\n");
                            continue;
                        }

                        if (next.contains("</style>")) {
                            stringBuffer.append("`;\n"
                                    + "        document.head.appendChild(slidingTagLiAfterStyle);\n"
                                    + "        window.paceOptions = {\n"
                                    + "            document: true,\n"
                                    + "            eventLag: true,\n"
                                    + "            restartOnPushState: true,\n"
                                    + "            restartOnRequestAfter: true,\n"
                                    + "            ajax: {\n"
                                    + "                trackMethods: ['POST', 'GET']\n"
                                    + "            }\n"
                                    + "        };\n"
                                    + "\n"
                                    + "        window.XMLHttpRequest_old = window.XMLHttpRequest;\n"
                                    + "    </script>");
                            continue;
                        }

                        if (next.contains("<script src=\"/content/pace-progress/pace.js\"></script>")) {
                            stringBuffer
                                    .append(next)
                                    .append("\n<script>\n"
                                            + "        progreso = 0;\n"
                                            + "        kbs = 0;\n"
                                            + "        tam = 10 * 1000;\n"
                                            + "        cont = 0;\n"
                                            + "\n"
                                            + "        var xmlhttp;\n"
                                            + "        (function() {\n"
                                            + "\n"
                                            + "            if (window.XMLHttpRequest) {\n"
                                            + "                xmlhttp = new XMLHttpRequest();\n"
                                            + "            } else {\n"
                                            + "                xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n"
                                            + "            }\n"
                                            + "\n"
                                            + "            var d = new Date();\n"
                                            + "            var start = d.getTime();\n"
                                            + "            xmlhttp.onreadystatechange = function() {\n"
                                            + "                if (this.readyState == 4 && this.status == 200) {\n"
                                            + "                    var timeG = (new Date().getTime()) - start;\n"
                                            + "                    kbs = Math.floor(4.5 / (timeG / 1000));\n"
                                            + "                    progresso();\n"
                                            + "                }\n"
                                            + "            };\n"
                                            + "            xmlhttp.open(\"GET\", \"index.html\", true);\n"
                                            + "            xmlhttp.send();\n"
                                            + "        }).call(this);\n"
                                            + "\n"
                                            + "        function progresso() {\n"
                                            + "\n"
                                            + "            progreso += kbs;\n"
                                            + "            var perc = Math.round((progreso / tam) * 1000);\n"
                                            + "\n"
                                            + "            slidingTagLiAfterStyle.innerHTML =\n"
                                            + "                slidingTagLiAfterStyle.innerHTML.replace(/content: 'Carregando [0-9]+%';/,\n"
                                            + "                    \"content: 'Carregando \" + perc + \"%';\");\n"
                                            + "\n"
                                            + "            if (perc < 99)\n"
                                            + "                setTimeout(function() {\n"
                                            + "                    progresso();\n"
                                            + "                }, 1000);\n"
                                            + "        }\n"
                                            + "\n"
                                            + "        window.XMLHttpRequest = window.XMLHttpRequest_old;\n"
                                            + "    </script>");
                            continue;
                        }

                        stringBuffer.append(next).append("\n");
                    }

                    sc.close();
                    fw = new FileWriter(new File(dir.getAbsolutePath() + "/src/main/webapp/index.html"));
                    fw.write(stringBuffer.toString());
                    fw.close();

                    fw = new FileWriter(dir.getAbsolutePath() + "/src/main/webapp/app/layouts/footer/footer.component.html");
                    fw.write("<div class=\"footer\">\n"
                            + "    <p>®2017 Miquéias Fernandes | "
                            + "<a href=\"http://www.mikeias.net\" target=\"_blanck\">www.mikeias.net</a> | "
                            + "contatomiqueiasfernandes@hotmail.com | "
                            + "(28) 99985-0280</p>\n"
                            + "</div>");
                    fw.close();

                    if (jCheckBox6.isSelected()) {
                        jTextArea1.append("###########################CRIANDO AUTO LOGIN###########################\n");
                        ///auto login
                        Resources.storeResource("autologin.service.ts", pastaAPP + "shared/login/");////////
                        Resources.replaceAfter("    logout(nonotify? :boolean) {\n"/////////////////////////
                                + "        if (this.principal.isAuthenticated()) {\n"
                                + "            this.authServerProvider.logout()\n"
                                + "                .subscribe(\n"
                                + "                () => {\n"
                                + "                },\n"
                                + "                () => {\n"
                                + "                },\n"
                                + "                () => {\n"
                                + "\n"
                                + "                    if(nonotify) {\n"
                                + "                        return;\n"
                                + "                    }\n"
                                + "\n"
                                + "                    this.eventManager.broadcast({\n"
                                + "                        name: 'logout',\n"
                                + "                        content: 'logout'\n"
                                + "                    });\n"
                                + "                }\n"
                                + "            );\n"
                                + "        }\n"
                                + "        this.principal.authenticate(null);\n"
                                + "    }\n"
                                + "}", "logout() {", pastaAPP + "shared/login/login.service.ts", true);

                        Resources.appendFile("export * from './login/autologin.service';",/////////////////////////
                                pastaAPP + "shared/index.ts");

                        Resources.insertOnFile(///////////////////////////////////////////////////////////////////////
                                "import {AutologinService} from './login/autologin.service';",
                                "} from './';", pastaAPP + "shared/shared.module.ts", true);

                        Resources.insertOnFile(//////////////////////////////////////////////////////////////////////
                                "AutologinService,",
                                "providers: [", pastaAPP + "shared/shared.module.ts", true);

                        Resources.insertOnFile(
                                "import { Principal } from '../../shared/auth/principal.service';\n"
                                + "import { AutologinService } from '../../shared/login/autologin.service';\n"
                                + "import { JhiEventManager } from 'ng-jhipster';",
                                "import { JhiLanguageHelper } from '../../shared';",
                                pastaAPP + "layouts/main/main.component.ts", true);

                        Resources.insertOnFile(
                                "private loginService :AutologinService,\n"
                                + "private principal :Principal,"
                                + "private eventManager: JhiEventManager,",
                                "constructor(",
                                pastaAPP + "layouts/main/main.component.ts", true);

                        Resources.replaceAfter("\n        this.principal.identity().then((account) => {\n"
                                + "            if (!account) {\n"
                                + "                this.loginService.autoLogin();\n"
                                + "            } else {\n"
                                + "                this.loginService.verifyAccount(account);\n"
                                + "            }\n"
                                + "        });\n"
                                + "\n"
                                + "\n"
                                + "        this.eventManager.subscribe('logout', (message) => {\n"
                                + "            this.loginService.autoLogin();\n"
                                + "        });\n"
                                + "\n"
                                + "    }\n"
                                + "}",
                                "});",
                                pastaAPP + "layouts/main/main.component.ts", false);

                        Resources.insertOnFile("        private eventManager: JhiEventManager,",
                                "constructor(",
                                pastaAPP + "shared/login/login.service.ts", true);

                        ///teste substituir arquivo
//                        Resources.insertOnPositionFile(" isAutoLogin() :boolean{\n"////////////////////////////////////
//                                + "        return false;\n"
//                                + "    }", -1, 1, pastaAPP + "shared/auth/principal.service.ts");
                        Resources.storeResource("principal.service.ts", pastaAPP + "shared/auth/");

                        Resources.insertOnPositionFile("import { JhiEventManager } from 'ng-jhipster';",////////////////
                                3, -1, pastaAPP + "shared/login/login.service.ts");

                    }

                    if (jCheckBox5.isSelected()) {
                        jTextArea1.append("###########################CRIANDO PRIVILEGIOS E PREFERENCIAS###########################\n");
///privilegios e preferencias
                        Resources.storeResource("preferencias.service.ts", pastaAPP + "entities/");
                        Resources.storeResource("privilegios.service.ts", pastaAPP + "entities/");
                        Resources.appendFile(
                                "export * from './preferencias.service';\n"
                                + "export * from './privilegios.service';", pastaAPP + "entities/index.ts");

                        Resources.insertOnFile(
                                "import {PreferenciasService} from \"./entities/preferencias.service\";\n"
                                + "import {PrivilegiosService} from \"./entities/privilegios.service\";",
                                "} from './layouts';", pastaAPP + "app.module.ts", true);
                        Resources.insertOnFile(
                                "        PreferenciasService,\n"
                                + "        PrivilegiosService,",
                                "providers: [", pastaAPP + "app.module.ts", true);

                        Resources.insertOnFile(
                                "public getCurrentColaborador():  Observable<Colaborador> {\n"
                                + "        return this.query().map(\n"
                                + "            (res: ResponseWrapper) => {\n"
                                + "                let c: Colaborador;\n"
                                + "                const cs: Colaborador[] = res.json;\n"
                                + "                if (cs.length < 2){\n"
                                + "                    c = cs[0];\n"
                                + "                } else {\n"
                                + "                    c = cs.find(col  => col.id < 0);\n"
                                + "                    c.id = cs.find( col => col.usuario.id === c.usuario.id ).id;\n"
                                + "                }\n"
                                + "                return c;\n"
                                + "            }\n"
                                + "        )\n"
                                + "    }",
                                ") { }", pastaAPP + "entities/colaborador/colaborador.service.ts", true);

                        Resources.insertOnIntervalo(
                                "  update(colaborador: Colaborador, nnootify? :boolean): Observable<Colaborador> {\n"
                                + "        const copy = this.convert(colaborador);\n"
                                + "        return this.http.put(this.resourceUrl, copy).map((res: Response) => {\n"
                                + "            const jsonResponse = res.json();\n"
                                + "\n"
                                + "            if(nnootify)\n"
                                + "                return this.convertItemFromServer(jsonResponse);\n"
                                + "\n"
                                + "            this.eventManager.broadcast({\n"
                                + "                name: 'colaborador',\n"
                                + "                content: 'update'\n"
                                + "            });\n"
                                + "\n"
                                + "            return this.convertItemFromServer(jsonResponse);\n",
                                ".*update.*",
                                ".*convertItemFromServer.*", false, false,
                                pastaAPP + "entities/colaborador/colaborador.service.ts");

                        Resources.insertOnFile("    constructor(private http: Http, private dateUtils: JhiDateUtils,\n"
                                + "                private eventManager: JhiEventManager,) { }", ") { }",
                                pastaAPP + "entities/colaborador/colaborador.service.ts", false);

                        Resources.insertOnPositionFile("import { JhiEventManager } from 'ng-jhipster';",
                                5, -1,
                                pastaAPP + "entities/colaborador/colaborador.service.ts");

                        Resources.storeFilePrivilegios(pastaJAVA + "service/PrivilegioService.java", projeto);

                        Resources.insertOnPositionFile("   ///find cargo from current user\n"
                                + "\n"
                                + "    @Query(\"select colaborador.cargos from Colaborador colaborador where colaborador.usuario.login = ?#{principal.username}\")\n"
                                + "    List<Cargo> getCargosOfCurrentUser();", -1, 2, pastaJAVA + "repository/CargoRepository.java");

                        Resources.insertOnPositionFile("import java.util.List;\n", 5, -1, pastaJAVA + "repository/CargoRepository.java");

                        String fs = pastaJAVA + "web/rest/";

                        Resources.projeto = projeto;
                        Resources.retirarDeFileNome = "Resource";

                        Resources.applyInMassa(fs, ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*|.*Cargo.*",
                                "insertOnPositionFile", new Object[]{
                                    "import com.mikeias.${{projeto}}$.service.PrivilegioService;\n"
                                    + "import com.mikeias.${{projeto}}$.domain.Cargo;\n"
                                    + "import com.mikeias.${{projeto}}$.repository.CargoRepository;\n",
                                    2,
                                    -1,
                                    new File(projeto)
                                }, 0);

                        Resources.applyInMassa(fs, ".*Cargo.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*",
                                "insertOnPositionFile", new Object[]{
                                    "import com.mikeias.${{projeto}}$.service.PrivilegioService;\n",
                                    2,
                                    -1,
                                    new File(projeto)
                                }, 0);

                        Resources.applyInMassa(fs, ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*|.*CargoResource.*",
                                "insertOnIntervalo",
                                new Object[]{
                                    "\n//////////////////////////////////REQUER PRIVILEGIOS\n"
                                    + "                                  private final CargoRepository cargoRepository;\n"
                                    + "\n"
                                    + "                                  public ${{filename}}$(${{filenameAlterado}}$Repository ${{filenamealterado}}$Repository, CargoRepository cargoRepository) {\n"
                                    + "                                  this.${{filenamealterado}}$Repository = ${{filenamealterado}}$Repository;\n"
                                    + "                                  this.cargoRepository = cargoRepository;\n"
                                    + "                                  }\n"
                                    + "//////////////////////////////////REQUER PRIVILEGIOS\n\n",
                                    ".*public.*Resource.*Repository.*", ".*}.*", false, false,
                                    new File(projeto)
                                }, 0);

                        /////mod POST
                        Resources.applyInMassa(fs, ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*",
                                "insertOnIntervalo",
                                new Object[]{
                                    "\n//////////////////////////////////REQUER PRIVILEGIOS\n"
                                    + "                                  if (!PrivilegioService.podeCriar(cargoRepository, ENTITY_NAME)) {\n"
                                    + "                                  log.error(\"TENTATIVA DE CRIAR SEM PERMISSÃO BLOQUEADA! \" + ENTITY_NAME  + \" : {}\", ${{filenamealterado}}$);\n"
                                    + "                                  return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, \"privilegios insuficientes.\", \"Este usuario não possui privilegios sufuentes para criar esta entidade.\")).body(null);\n"
                                    + "                                  }\n"
                                    + "//////////////////////////////////REQUER PRIVILEGIOS\n\n",
                                    ".*request to save.*",
                                    ".*if.*",
                                    true, true,
                                    new File(projeto)
                                }, 0);

                        ////mod PUT
                        Resources.applyInMassa(fs, ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*",
                                "insertOnIntervalo",
                                new Object[]{
                                    "\n//////////////////////////////////REQUER PRIVILEGIOS\n"
                                    + "                                  if (!PrivilegioService.podeEditar(cargoRepository, ENTITY_NAME)) {\n"
                                    + "                                  log.error(\"TENTATIVA DE EDITAR SEM PERMISSÃO BLOQUEADA! \" + ENTITY_NAME  + \" : {}\", ${{filenamealterado}}$);\n"
                                    + "                                  return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, \"privilegios insuficientes.\", \"Este usuario não possui privilegios sufuentes para editar esta entidade.\")).body(null);\n"
                                    + "                                  }\n"
                                    + "//////////////////////////////////REQUER PRIVILEGIOS\n\n",
                                    ".*request to update.*",
                                    ".*if.*",
                                    true, true,
                                    new File(projeto)
                                }, 0);

                        ///mod GET
                        Resources.applyInMassa(fs, ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*",
                                "insertOnIntervalo",
                                new Object[]{
                                    "\n//////////////////////////////////REQUER PRIVILEGIOS\n"
                                    + "                                  if (!PrivilegioService.podeVer(cargoRepository, ENTITY_NAME)) {\n"
                                    + "                                  ${{filenamealterado}}$ = null;\n"
                                    + "                                  log.error(\"TENTATIVA DE VISUALIZAR SEM PERMISSÃO BLOQUEADA! \" + ENTITY_NAME + \" : {}\", id);\n"
                                    + "                                  }\n"
                                    + "//////////////////////////////////REQUER PRIVILEGIOS\n\n",
                                    ".*Repository.findOne.*",
                                    ".*return.*",
                                    true, true,
                                    new File(projeto)
                                }, 0);
                        Resources.applyInMassa(fs, ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*",
                                "insertOnIntervalo",
                                new Object[]{
                                    "\n//////////////////////////////////REQUER PRIVILEGIOS\n"
                                    + "                                  if (!PrivilegioService.podeVer(cargoRepository, ENTITY_NAME)) {\n"
                                    + "                                  log.error(\"TENTATIVA DE VISUALIZAR SEM PERMISSÃO BLOQUEADA! \" + ENTITY_NAME);\n"
                                    + "                                  return  null;\n"
                                    + "                                  }\n"
                                    + "\n"
                                    + "//////////////////////////////////REQUER PRIVILEGIOS\n\n",
                                    ".*request to get all.*",
                                    ".*return.*",
                                    true, true,
                                    new File(projeto)
                                }, 0);

                        ////mod DELETE
                        Resources.applyInMassa(fs, ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*",
                                "insertOnIntervalo",
                                new Object[]{
                                    "\n//////////////////////////////////REQUER PRIVILEGIOS\n"
                                    + "                                  if (PrivilegioService.podeDeletar(cargoRepository, ENTITY_NAME)) {\n"
                                    + "                                  ${{filenamealterado}}$Repository.delete(id);\n"
                                    + "                                  } else {\n"
                                    + "                                  log.error(\"TENTATIVA DE EXCUIR SEM PERMISSÃO BLOQUEADA! \" + ENTITY_NAME + \" : {}\", id);\n"
                                    + "                                  return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, \"privilegios insuficientes.\", \"Este usuario não possui privilegios sufuentes para deletar esta entidade.\")).body(null);\n"
                                    + "                                  }\n"
                                    + "//////////////////////////////////REQUER PRIVILEGIOS\n\n",
                                    ".*request to delete.*",
                                    ".*return.*",
                                    true, true,
                                    new File(projeto)
                                }, 0);

                        String content = "            <label>Permissões</label>\n"
                                + "            <div class=\"table-responsive\">\n"
                                + "            <table class=\"table table-striped\">\n"
                                + "                <thead>\n"
                                + "                <th>\n"
                                + "                    Entidade\n"
                                + "                </th>\n"
                                + "                <th>\n"
                                + "                    visualizar\n"
                                + "                </th>\n"
                                + "                <th>\n"
                                + "                    Adicionar\n"
                                + "                </th>\n"
                                + "                <th>\n"
                                + "                    Editar\n"
                                + "                </th>\n"
                                + "                <th>\n"
                                + "                    Deletar\n"
                                + "                </th>\n"
                                + "                </thead>\n"
                                + "                <tbody>\n"
                                + "                <tr *ngFor=\"let entidade of entidades\">\n"
                                + "                    <td>{{entidade}}</td>\n"
                                + "                    <td>\n"
                                + "                        <input #vari1 type=\"checkbox\" class=\"form-control\"\n"
                                + "                               (change)=\"setCheck(vari1.checked, entidade, 'visualizar')\" [checked]=\"checks[entidade]['visualizar']\" />\n"
                                + "                    </td>\n"
                                + "                    <td>\n"
                                + "                        <input #vari2 type=\"checkbox\" class=\"form-control\"\n"
                                + "                               (change)=\"setCheck(vari2.checked, entidade, 'adicionar')\" [checked]=\"checks[entidade]['adicionar']\" />\n"
                                + "                    </td>\n"
                                + "                    <td>\n"
                                + "                        <input #vari3 type=\"checkbox\" class=\"form-control\"\n"
                                + "                               (change)=\"setCheck(vari3.checked, entidade, 'editar')\" [checked]=\"checks[entidade]['editar']\" />\n"
                                + "                    </td>\n"
                                + "                    <td>\n"
                                + "                        <input #vari4 type=\"checkbox\" class=\"form-control\"\n"
                                + "                               (change)=\"setCheck(vari4.checked, entidade, 'deletar')\" [checked]=\"checks[entidade]['deletar']\" />\n"
                                + "                    </td>\n"
                                + "                </tr>\n"
                                + "                </tbody>\n"
                                + "            </table>\n"
                                + "            </div>";

                        Resources.insertOnIntervalo(content, 
                                ".*permissao.*", ".*cargo.*", false, false,
                                pastaAPP + "entities/cargo/cargo-dialog.component.html");

                        Resources.insertOnIntervalo("   save() {\n"
                                + "        this.isSaving = true;\n"
                                + "\n"
                                + "        let priv = \"\";\n"
                                + "\n"
                                + "        this.entidades.forEach((ent :string) => {\n"
                                + "            this.niveis.forEach((nv: string) => {\n"
                                + "                if (this.checks[ent][nv]) {\n"
                                + "                    priv += ent + \"-\" + nv + \",\";\n"
                                + "                }\n"
                                + "            });\n"
                                + "        });\n"
                                + "\n"
                                + "\n"
                                + "        this.cargo.permissao = priv;\n"
                                + "\n"
                                + "        if (this.cargo.id !== undefined) {\n"
                                + "            this.subscribeToSaveResponse(\n"
                                + "                this.cargoService.update(this.cargo));\n"
                                + "        } else {\n"
                                + "            this.subscribeToSaveResponse(\n"
                                + "                this.cargoService.create(this.cargo));\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "  setCheck(checked: boolean, entidade: string, nivel: string) {\n"
                                + "        this.checks[entidade][nivel] = checked;\n"
                                + "        console.log(checked + entidade + nivel);\n"
                                + "        console.log(this.checks);\n"
                                + "    }\n", ".*save[() {].*", ".*private subscribeToSaveResponse.*", false, true,
                                pastaAPP + "entities/cargo/cargo-dialog.component.ts");

                        Resources.insertOnPositionFile("import {isNullOrUndefined} from 'util';\n", 3, -1, pastaAPP + "entities/cargo/cargo-dialog.component.ts");
                        
                        Resources.insertOnIntervalo(
                                "this.isSaving = false;\n"
                                + " this.cargo.permissao.split(',').forEach((privilegio: string) => {\n"
                                + "            const data: string[] = privilegio.split(\"-\");\n"
                                + "            if (!isNullOrUndefined(data) && data.length === 2) {\n"
                                + "                this.checks[data[0]][data[1]] = true;\n"
                                + "            }\n"
                                + "        });", ".*ngOnInit[() {].*", ".*}.*", true, true, pastaAPP + "entities/cargo/cargo-dialog.component.ts");

                        Resources.insertOnIntervalo("    entidades: string[] = [\n"
                                + "        \"cardapio\",\n"
                                + "        \"cargo\",\n"
                                + "        \"cliente\",\n"
                                + "        \"colaborador\",\n"
                                + "        \"comanda\",\n"
                                + "        \"endereco\",\n"
                                + "        \"imposto\",\n"
                                + "        \"lancamento\",\n"
                                + "        \"mesa\",\n"
                                + "        \"nota\",\n"
                                + "        \"produto\",\n"
                                + "        \"restaurante\",\n"
                                + "        \"venda\"\n"
                                + "    ];\n"
                                + "\n"
                                + "    niveis: string[] = [\n"
                                + "        \"visualizar\",\n"
                                + "        \"adicionar\",\n"
                                + "        \"editar\",\n"
                                + "        \"deletar\"\n"
                                + "    ];\n"
                                + "\n"
                                + "    checks: boolean[][] = [];\n"
                                + "\n"
                                + "\n"
                                + "\n"
                                + "    constructor(\n"
                                + "        public activeModal: NgbActiveModal,\n"
                                + "        private dataUtils: JhiDataUtils,\n"
                                + "        private jhiAlertService: JhiAlertService,\n"
                                + "        private cargoService: CargoService,\n"
                                + "        private eventManager: JhiEventManager\n"
                                + "    ) {\n"
                                + "        this.entidades.forEach((ent :string) => {\n"
                                + "\n"
                                + "            const bols:boolean[] = [];\n"
                                + "\n"
                                + "            bols[\"visualizar\"] = false;\n"
                                + "            bols[\"adicionar\"] = false;\n"
                                + "            bols[\"editar\"] = false;\n"
                                + "            bols[\"deletar\"] = false;\n"
                                + "\n"
                                + "            this.checks[ent] = bols;\n"
                                + "        })\n"
                                + "    }", ".*constructor.*", ".*}.*", false, false,
                                pastaAPP + "entities/cargo/cargo-dialog.component.ts");

                        Resources.applyInMassa(fs.replace("/src/main/", "/src/test/"), ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*|.*Cargo.*",
                                "insertOnPositionFile", new Object[]{
                                    "import com.mikeias.${{projeto}}$.repository.CargoRepository;\n",
                                    2,
                                    -1,
                                    new File(projeto)
                                }, 0);

                        Resources.applyInMassa(fs.replace("/src/main/", "/src/test/"), ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*|.*Cargo.*",
                                "insertOnFile", new Object[]{
                                    "    private CargoRepository cargoRepository;\n\n "
                                    + "    @Autowired\n",
                                    "@Autowired",
                                    new File(pastaJAVA),
                                    true
                                }, -1);

                        Resources.retirarDeFileNome = "ResourceIntTest";

                        Resources.applyInMassa(fs.replace("/src/main/", "/src/test/"), ".*Resource.*", ".*Account.*|.*Audit.*|.*Logs.*|.*Profile.*|.*User.*|.*Cargo.*",
                                "insertOnIntervalo", new Object[]{
                                    "        final ${{filenameAlterado}}$Resource ${{filenamealterado}}$Resource = new ${{filenameAlterado}}$Resource(${{filenamealterado}}$Repository,cargoRepository);\n",
                                    ".*final.*Resource.*Resource.*new .*Resource.*Repository.*",
                                    ".*this.*", false, true,
                                    new File(projeto)
                                }, 0);

                    }

                    if (jCheckBox4.isSelected()) {
                        jTextArea1.append("###########################CRIANDO TABLE HEADER###########################\n");
                        ///tabke header
                        Resources.storeResource("tableheader.component.html", pastaAPP + "layouts/tableheader/");
                        Resources.storeResource("tableheader.component.scss", pastaAPP + "layouts/tableheader/");
                        Resources.storeResource("tableheader.component.ts", pastaAPP + "layouts/tableheader/");
                        Resources.storeResource("tableheader.directive.ts", pastaAPP + "shared/utils/");

                        ///imports
                        Resources.insertOnFile(
                                "import { TableheaderComponent } from './layouts/tableheader/tableheader.component';",
                                "} from './layouts';", pastaAPP + "app.module.ts", true);

                        Resources.insertOnFile(
                                "TableheaderComponent,",
                                "declarations: [", pastaAPP + "app.module.ts", true);
                        Resources.insertOnFile(
                                "    entryComponents: [\n"
                                + "        TableheaderComponent,\n"
                                + "    ],",
                                "],", pastaAPP + "app.module.ts", true);

                        Resources.appendFile("export * from './tableheader/tableheader.component';",
                                pastaAPP + "layouts/index.ts");

                        Resources.appendFile("export * from './utils/tableheader.directive';",
                                pastaAPP + "shared/index.ts");

                        Resources.insertOnFile(
                                "import {TableheaderDirective} from \"./utils/tableheader.directive\";",
                                "} from './';", pastaAPP + "shared/shared.module.ts", true);

                        Resources.insertOnFile(
                                "TableheaderDirective,",
                                "declarations: [", pastaAPP + "shared/shared.module.ts", true);

                        Resources.insertOnFile(
                                "TableheaderDirective,",
                                "exports: [", pastaAPP + "shared/shared.module.ts", true);

                        ///configurar tabelas
                        String local = pastaAPP + "entities/";

                        Resources.applyInMassa(
                                local,
                                ".*component.html",
                                ".*-.*",
                                "insertOnIntervaloFile",
                                new Object[]{
                                    " <div #tableH>\n"
                                    + "    </div>\n"
                                    + "\n"
                                    + "\n"
                                    + "        <div class=\"table-responsive\" *ngIf=\"${{filename}}$s\">\n"
                                    + "            <table class=\"table table-striped\" [jhiTableheader]=\"{'view': tableHeader, 'entidade': '${{filename}}$'}\">\n"
                                    + "                <thead>\n"
                                    + "                <tr>\n"
                                    + "                    <!--<th><span jhiTranslate=\"global.field.id\">ID</span></th>-->",
                                    ".*table-responsive.*",
                                    ".*ID.*",
                                    false,
                                    false,
                                    new File("/home/")
                                }, 0);
                        ///insertOnFile(String text, String depoisDe, String file, boolean incluirLinha)
                        Resources.applyInMassa(
                                local,
                                ".*component.html",
                                ".*-.*",
                                "insertOnFile",
                                new Object[]{
                                    "                    <th style=\"text-align: center;\"><span><span>Ações</span></span></th>",
                                    "<th></th>",
                                    new File("/home/"),
                                    false
                                }, -1);

                        Resources.applyInMassa(
                                local,
                                ".*component.html",
                                ".*-.*",
                                "insertOnFile",
                                new Object[]{
                                    "                    <!--<td><a [routerLink]=\"['../${{filename}}$', ${{filename}}$.id ]\">{{${{filename}}$.id}}</a></td>-->",
                                    "id}}</a></td>",
                                    new File("/home/"),
                                    false
                                }, 0);

                        Resources.applyInMassa(
                                local,
                                ".*component.ts",
                                ".*-.*",
                                "insertOnFile",
                                new Object[]{
                                    "@ViewChild('tableH', {read: ViewContainerRef}) tableHeader;",
                                    "implements OnInit, OnDestroy {",
                                    new File("/home/"),
                                    true
                                }, -1);

                        Resources.applyInMassa(
                                local,
                                ".*component.ts",
                                ".*-.*",
                                "insertOnFile",
                                new Object[]{
                                    "import {Component, OnInit, OnDestroy, ViewChild, ViewContainerRef} from '@angular/core';",
                                    "} from '@angular/core';",
                                    new File("/home/"),
                                    false
                                }, -1);
                    }

                    if (jCheckBox2.isSelected()) {
                        jTextArea1.append("###########################INSTALANDO HTML EDITOR###########################\n");
                        runCommand(dir, "npm,install,popper.js@^1.11.0,--save");
                        runCommand(dir, "npm,install,ngx-quill-editor,--save");
                    }

                    if (jCheckBox3.isSelected()) {
                        jTextArea1.append("###########################INSTALANDO QRSCANER###########################\n");
                        runCommand(dir, "npm,install,angular2-qrscanner,--save");
                    }

                    jTextArea1.append("###########################LANÇANDO TERMINAIS###########################\n");

                    Runtime.getRuntime().exec(new String[]{"gnome-terminal", /////"--disable-factory",
                        "--working-directory=" + dir.getAbsolutePath(), "-x", "yarn", "install"}).waitFor();

                    jProgressBar1.setValue(100);
                    terminou = true;

                    java.awt.Toolkit.getDefaultToolkit().beep();

                    JOptionPane.showMessageDialog(rootPane, "O app foi criado com sucesso!");

                    Runtime.getRuntime().exec(new String[]{"gnome-terminal",
                        "--working-directory=" + dir.getAbsolutePath(), "-x", "./mvnw"}).waitFor();

                    Runtime.getRuntime().exec(new String[]{"gnome-terminal",
                        "--working-directory=" + dir.getAbsolutePath(), "-x", "sudo", "yarn", "start"}).waitFor();

                    Runtime.getRuntime().exec(new String[]{"git", "init"}, new String[]{""}, dir).waitFor();
                    Runtime.getRuntime().exec(new String[]{"git", "add", "*"}, new String[]{""}, dir).waitFor();
                    Runtime.getRuntime().exec(new String[]{"git", "commit", "-m", "\"commit inicial\""}, new String[]{""}, dir).waitFor();
                    if (jCheckBox1.isSelected()) {
                        System.exit(0);
                    } else {
                        jButton2.setEnabled(true);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }).start();

    }

    static boolean rodando = true;
    static int cont = 0;

    private void runCommand(File dir, String comando) {
        rodando = true;
        try {
            Process exec = Runtime.getRuntime().exec(comando.split(","), new String[]{""}, dir);

            new Thread(() -> {

                try {
                    Scanner sc = new Scanner(exec.getErrorStream());
                    while (sc.hasNextLine() || rodando) {
                        String next = sc.nextLine();

                        jTextArea1.append("ATENCAO: " + next + "\n");

                        if (cont++ > 1000) {
                            jTextArea1.setText("");
                            cont = 0;
                        }

                    }
                } catch (Exception ex) {

                }
            }).start();

            Scanner sc = new Scanner(exec.getInputStream());

            while (sc.hasNextLine()) {
                String next = sc.nextLine();

                jTextArea1.append(next + "\n");

                if (cont++ > 1000) {
                    jTextArea1.setText("");
                    cont = 0;
                }
            }

            rodando = false;

        } catch (Exception ex) {
            System.err.println("Impossivel rodar comando " + comando);
            System.err.println(ex);
        }

    }
}
//popper.js@^1.11.0
